---
- hosts: all

  tasks:

  - name: Install common packages
    become: yes
    apt: name={{ item }} state=latest update_cache=yes
    with_items: "{{ packages }}"

  # Node.js
  - name: Download Node.js PPM
    become: yes
    get_url:
      url: https://deb.nodesource.com/setup_6.x
      dest: /tmp/setup.sh
      mode: 0440
  - name: Install Node.js PPM
    become: yes
    shell: bash /tmp/setup.sh
  - name: Install Node.js
    become: yes
    apt: name=nodejs state=latest
  - name: Install npm packages
    become: yes
    npm:
      name: "{{ item }}"
      global: yes
      executable: /usr/bin/npm
    with_items:
      - carto
      - kosmtik
      - pm2
      # - cartocc

  # Setup PostgreSQL
  - name: Make sure PostgreSQL is running
    become: yes
    action: service name=postgresql state=started enabled=true

  - name: "Create a user `{{ ansible_env.USER }}` for PostgreSQL"
    become: yes
    become_user: postgres
    postgresql_user:
      name: "{{ ansible_env.USER }}"
      password: "{{ ansible_env.USER }}"

  - name: Create a database `{{ db.name }}`
    become: yes
    become_user: postgres
    postgresql_db:
      name: "{{ db.name }}"
      encoding: "{{ db.encoding }}"
      owner: "{{ ansible_env.USER }}"

  - name: Run SQL `CREATE EXTENSION IF NOT EXISTS hstore;`
    become: yes
    become_user: postgres
    shell: "psql -c \"CREATE EXTENSION IF NOT EXISTS hstore;\" -d {{ db.name }}"

  - name: Run SQL `CREATE EXTENSION IF NOT EXISTS postgis;`
    become: yes
    become_user: postgres
    shell: "psql -c \"CREATE EXTENSION IF NOT EXISTS postgis;\" -d {{ db.name }}"

  # Installs mod_tile
  - name: Clone the `mod_tile`
    become: yes
    git:
      repo: https://github.com/openstreetmap/mod_tile.git
      dest: /usr/local/src/mod_tile

  - name: Compile and Install the `mod_tile`
    become: yes
    shell: ./autogen.sh && ./configure && make && make install && make install-mod_tile && ldconfig
    args:
      chdir: /usr/local/src/mod_tile

  # renderd
  - name: Setup renderd
    become: yes
    replace:
      dest: /usr/local/etc/renderd.conf
      regexp: ^plugins_dir=/usr/lib/mapnik/input
      replace: plugins_dir=/usr/lib/mapnik/3.0/input
    notify:
      - restart-renderd

  - name: Setup renderd
    become: yes
    replace:
      dest: /usr/local/etc/renderd.conf
      regexp: ^HOST=.*$
      replace: HOST=localhost
    notify:
      - restart-renderd

  - name: Setup renderd
    become: yes
    replace:
      dest: /usr/local/etc/renderd.conf
      regexp: ^URI=.+
      replace: "URI={{ uri }}"
    notify:
      - restart-renderd

  - name: Copy `/usr/local/src/mod_tile/debian/renderd.init`
    become: yes
    copy:
      src: /usr/local/src/mod_tile/debian/renderd.init
      dest: /etc/init.d/renderd
      mode: 0755
    notify:
      - restart-renderd

  - name: Setup renderd init
    become: yes
    replace:
      dest: /etc/init.d/renderd
      regexp: ^DAEMON=.*
      replace: DAEMON=/usr/local/bin/$NAME
    notify:
      - restart-renderd

  - name: Setup renderd init
    become: yes
    replace:
      dest: /etc/init.d/renderd
      regexp: ^DAEMON_ARGS=""
      replace: DAEMON_ARGS="-c /usr/local/etc/renderd.conf"
    notify:
      - restart-renderd

  - name: Setup renderd init
    become: yes
    replace:
      dest: /etc/init.d/renderd
      regexp: ^RUNASUSER=www-data
      replace: "RUNASUSER={{ ansible_env.USER }}"
    notify:
      - restart-renderd

  - name: Create `/var/lib/mod_tile`
    become: yes
    file:
      path: /var/lib/mod_tile
      owner: "{{ ansible_env.USER }}"
      group: "{{ ansible_env.USER }}"
      state: directory

  - name: Make sure renderd is running
    become: yes
    action: service name=renderd state=started enabled=true

  # Setup Apache2
  - name: Make sure apache is running
    become: yes
    action: service name=apache2 state=started enabled=true

  - name: Create `/etc/apache2/mods-available/mod_tile.load`
    become: yes
    shell: echo "LoadModule tile_module /usr/lib/apache2/modules/mod_tile.so" > /etc/apache2/mods-available/mod_tile.load

  - name: Activate `mod_tile`
    become: yes
    shell: a2enmod mod_tile
    notify:
      - restart-apache

  - name: Place `/etc/apache2/sites-enabled/000-default.conf`
    become: yes
    template:
      src: templates/000-default.conf
      dest: /etc/apache2/sites-enabled/000-default.conf
    notify:
      - restart-apache

  # kosmtic
  - name: Place the config for `kosmtic`
    template:
      src: templates/kosmtic.json
      dest: "{{ ansible_env.HOME }}/.kosmtik.json"

  # tilemill
  # - name: Clone the TilMill
  #   become: yes
  #   git:
  #     repo: https://github.com/tilemill-project/tilemill.git
  #     dest: /usr/local/src/tilemill
  #
  # - name: Install dependencies for the TilMill
  #   become: yes
  #   shell: npm install
  #   args:
  #     chdir: /usr/local/src/tilemill
  #
  # - name: Place the config for the TileMill
  #   template:
  #     src: templates/tilemill.json
  #     dest: "{{ ansible_env.HOME }}/.tilemill.json"
  #
  # - name: Start Tilemill as a server
  #   shell: "pm2 -f  --name=tilemill start index.js -- --config={{ ansible_env.HOME }}/.tilemill.json"
  #   args:
  #     chdir: /usr/local/src/tilemill

  handlers:
    - name: restart-apache
      become: yes
      action: service name=apache2 state=restarted
    - name: restart-renderd
      become: yes
      action: service name=renderd state=restarted
